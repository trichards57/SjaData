@page "/access"
@using SJAData.Client.Model.Users
@using SJAData.Client.Services.Interfaces
@using System.Security.Claims

@rendermode InteractiveAuto

@inject IUserService UserService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>SJA In Numbers - Access</PageTitle>

<h2>Access</h2>
<HomeLink />

<table class="access-table">
    <thead>
        <tr>
            <th />
            <th>Approved</th>
            <th>Role</th>
            <th />
        </tr>
    </thead>
    <tbody>
        @foreach (var user in users)
        {
            var isCurrentUser = user.Id == currentUserId;

            <tr>
                <td>@user.Email</td>
                <td>
                    <button @onclick="() => ApproveUser(user.Id)" disabled="@(isCurrentUser ? "true" : null)" class="@(user.IsApproved ? "checked" : "")" title="@(isCurrentUser ? "You cannot control your own account." : null )">
                        @if (user.IsApproved)
                        {
                            <text>Approved</text>
                        }
                        else
                        {
                            <text>Approve User</text>
                        }
                    </button>
                </td>
                <td>
                    <button @onclick="() => SetToAdmin(user.Id)" disabled="@(isCurrentUser ? "true" : null)" class="@(user.Roles.Any(r => r.Equals("admin", StringComparison.InvariantCultureIgnoreCase)) ? "checked" : "")" title="@(isCurrentUser ? "You cannot control your own account." : null )">Admin</button>
                    <button @onclick="() => SetToLead(user.Id)" disabled="@(isCurrentUser ? "true" : null)" class="@(user.Roles.Any(r => r.Equals("lead", StringComparison.InvariantCultureIgnoreCase)) ? "checked" : "")" title="@(isCurrentUser ? "You cannot control your own account." : null )">Lead</button>
                    <button @onclick="() => SetToNone(user.Id)" disabled="@(isCurrentUser ? "true" : null)" class="@(user.Roles.Count == 0 ? "checked" : "")" title="@(isCurrentUser ? "You cannot control your own account." : null )">None</button>
                </td>
                <td>
                    <button @onclick="() => DeleteUser(user.Id)" disabled="@(isCurrentUser ? "true" : null)" title="@(isCurrentUser ? "You cannot control your own account." : null )">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private IEnumerable<UserDetails> users = [];
    private string currentUserId = string.Empty;

    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        currentUserId = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value ?? throw new InvalidOperationException();

        users = await UserService.GetAll().ToListAsync();
    }

    private async Task ApproveUser(string userId)
    {
        await UserService.ApproveUserAsync(userId);

        users = await UserService.GetAll().ToListAsync();

        StateHasChanged();
    }

    private async Task DeleteUser(string userId)
    {
        await UserService.DeleteUserAsync(userId);

        users = await UserService.GetAll().ToListAsync();

        StateHasChanged();
    }

    private async Task SetToAdmin(string userId)
    {
        var userUpdate = new UserRoleChange { Id = userId, Roles = ["Admin"] };

        await UserService.UpdateUserAsync(userUpdate);

        users = await UserService.GetAll().ToListAsync();
        StateHasChanged();
    }

    private async Task SetToLead(string userId)
    {
        var userUpdate = new UserRoleChange { Id = userId, Roles = ["Lead"] };

        await UserService.UpdateUserAsync(userUpdate);

        users = await UserService.GetAll().ToListAsync();
        StateHasChanged();
    }

    private async Task SetToNone(string userId)
    {
        var userUpdate = new UserRoleChange { Id = userId, Roles = [] };

        await UserService.UpdateUserAsync(userUpdate);

        users = await UserService.GetAll().ToListAsync();
        StateHasChanged();
    }
}
