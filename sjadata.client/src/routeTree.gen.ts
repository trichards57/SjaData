/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UpdateImport } from './routes/update'
import { Route as PrivacyImport } from './routes/privacy'
import { Route as HoursImport } from './routes/hours'
import { Route as AccessImport } from './routes/access'
import { Route as IndexImport } from './routes/index'
import { Route as TrendsIndexImport } from './routes/trends/index'
import { Route as PeopleIndexImport } from './routes/people/index'
import { Route as TrendsRegionImport } from './routes/trends/$region'
import { Route as PeopleRegionImport } from './routes/people/$region'

// Create/Update Routes

const UpdateRoute = UpdateImport.update({
  path: '/update',
  getParentRoute: () => rootRoute,
} as any)

const PrivacyRoute = PrivacyImport.update({
  path: '/privacy',
  getParentRoute: () => rootRoute,
} as any)

const HoursRoute = HoursImport.update({
  path: '/hours',
  getParentRoute: () => rootRoute,
} as any)

const AccessRoute = AccessImport.update({
  path: '/access',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TrendsIndexRoute = TrendsIndexImport.update({
  path: '/trends/',
  getParentRoute: () => rootRoute,
} as any)

const PeopleIndexRoute = PeopleIndexImport.update({
  path: '/people/',
  getParentRoute: () => rootRoute,
} as any)

const TrendsRegionRoute = TrendsRegionImport.update({
  path: '/trends/$region',
  getParentRoute: () => rootRoute,
} as any)

const PeopleRegionRoute = PeopleRegionImport.update({
  path: '/people/$region',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/access': {
      id: '/access'
      path: '/access'
      fullPath: '/access'
      preLoaderRoute: typeof AccessImport
      parentRoute: typeof rootRoute
    }
    '/hours': {
      id: '/hours'
      path: '/hours'
      fullPath: '/hours'
      preLoaderRoute: typeof HoursImport
      parentRoute: typeof rootRoute
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyImport
      parentRoute: typeof rootRoute
    }
    '/update': {
      id: '/update'
      path: '/update'
      fullPath: '/update'
      preLoaderRoute: typeof UpdateImport
      parentRoute: typeof rootRoute
    }
    '/people/$region': {
      id: '/people/$region'
      path: '/people/$region'
      fullPath: '/people/$region'
      preLoaderRoute: typeof PeopleRegionImport
      parentRoute: typeof rootRoute
    }
    '/trends/$region': {
      id: '/trends/$region'
      path: '/trends/$region'
      fullPath: '/trends/$region'
      preLoaderRoute: typeof TrendsRegionImport
      parentRoute: typeof rootRoute
    }
    '/people/': {
      id: '/people/'
      path: '/people'
      fullPath: '/people'
      preLoaderRoute: typeof PeopleIndexImport
      parentRoute: typeof rootRoute
    }
    '/trends/': {
      id: '/trends/'
      path: '/trends'
      fullPath: '/trends'
      preLoaderRoute: typeof TrendsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/access': typeof AccessRoute
  '/hours': typeof HoursRoute
  '/privacy': typeof PrivacyRoute
  '/update': typeof UpdateRoute
  '/people/$region': typeof PeopleRegionRoute
  '/trends/$region': typeof TrendsRegionRoute
  '/people': typeof PeopleIndexRoute
  '/trends': typeof TrendsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/access': typeof AccessRoute
  '/hours': typeof HoursRoute
  '/privacy': typeof PrivacyRoute
  '/update': typeof UpdateRoute
  '/people/$region': typeof PeopleRegionRoute
  '/trends/$region': typeof TrendsRegionRoute
  '/people': typeof PeopleIndexRoute
  '/trends': typeof TrendsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/access': typeof AccessRoute
  '/hours': typeof HoursRoute
  '/privacy': typeof PrivacyRoute
  '/update': typeof UpdateRoute
  '/people/$region': typeof PeopleRegionRoute
  '/trends/$region': typeof TrendsRegionRoute
  '/people/': typeof PeopleIndexRoute
  '/trends/': typeof TrendsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/access'
    | '/hours'
    | '/privacy'
    | '/update'
    | '/people/$region'
    | '/trends/$region'
    | '/people'
    | '/trends'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/access'
    | '/hours'
    | '/privacy'
    | '/update'
    | '/people/$region'
    | '/trends/$region'
    | '/people'
    | '/trends'
  id:
    | '__root__'
    | '/'
    | '/access'
    | '/hours'
    | '/privacy'
    | '/update'
    | '/people/$region'
    | '/trends/$region'
    | '/people/'
    | '/trends/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AccessRoute: typeof AccessRoute
  HoursRoute: typeof HoursRoute
  PrivacyRoute: typeof PrivacyRoute
  UpdateRoute: typeof UpdateRoute
  PeopleRegionRoute: typeof PeopleRegionRoute
  TrendsRegionRoute: typeof TrendsRegionRoute
  PeopleIndexRoute: typeof PeopleIndexRoute
  TrendsIndexRoute: typeof TrendsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AccessRoute: AccessRoute,
  HoursRoute: HoursRoute,
  PrivacyRoute: PrivacyRoute,
  UpdateRoute: UpdateRoute,
  PeopleRegionRoute: PeopleRegionRoute,
  TrendsRegionRoute: TrendsRegionRoute,
  PeopleIndexRoute: PeopleIndexRoute,
  TrendsIndexRoute: TrendsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/access",
        "/hours",
        "/privacy",
        "/update",
        "/people/$region",
        "/trends/$region",
        "/people/",
        "/trends/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/access": {
      "filePath": "access.tsx"
    },
    "/hours": {
      "filePath": "hours.tsx"
    },
    "/privacy": {
      "filePath": "privacy.tsx"
    },
    "/update": {
      "filePath": "update.tsx"
    },
    "/people/$region": {
      "filePath": "people/$region.tsx"
    },
    "/trends/$region": {
      "filePath": "trends/$region.tsx"
    },
    "/people/": {
      "filePath": "people/index.tsx"
    },
    "/trends/": {
      "filePath": "trends/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
